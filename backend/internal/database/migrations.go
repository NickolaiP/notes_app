package database

import (
	"database/sql"
	"log"
)

// RunMigrations выполняет миграции базы данных, создавая необходимые таблицы,
// если они еще не существуют. Это необходимо для обеспечения структуры
// базы данных перед запуском приложения.
func RunMigrations(db *sql.DB) {
	// SQL-запрос для создания таблицы пользователей.
	// Таблица содержит следующие столбцы:
	// - id: уникальный идентификатор пользователя, автоинкрементируемый.
	// - username: уникальное имя пользователя, не допускающее NULL значений.
	// - password: хэш пароля пользователя, не допускающий NULL значений.
	userTable := `CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(100) NOT NULL
    );`

	// SQL-запрос для создания таблицы заметок.
	// Таблица содержит следующие столбцы:
	// - id: уникальный идентификатор заметки, автоинкрементируемый.
	// - user_id: идентификатор пользователя, которому принадлежит заметка,
	//   не допускающий NULL значений и являющийся внешним ключом для таблицы пользователей.
	// - text: текст заметки, не допускающий NULL значений.
	// Внешний ключ на user_id ссылается на столбец id таблицы users и настроен на удаление каскадом,
	// что означает, что заметки будут удалены при удалении соответствующего пользователя.
	notesTable := `CREATE TABLE IF NOT EXISTS notes (
        id SERIAL PRIMARY KEY,
        user_id INT NOT NULL,
        text TEXT NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    );`

	// Выполнение SQL-запроса для создания таблицы пользователей.
	// В случае возникновения ошибки во время выполнения запроса, приложение завершится с ошибкой.
	_, err := db.Exec(userTable)
	if err != nil {
		log.Fatal(err)
	}

	// Выполнение SQL-запроса для создания таблицы заметок.
	// В случае возникновения ошибки во время выполнения запроса, приложение завершится с ошибкой.
	_, err = db.Exec(notesTable)
	if err != nil {
		log.Fatal(err)
	}
}
